(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{331:function(n,t,a){n.exports=a.p+"assets/img/nginx-01.12b38502.png"},332:function(n,t,a){n.exports=a.p+"assets/img/nginx-02.6a46a629.png"},333:function(n,t,a){n.exports=a.p+"assets/img/nginx-03.2cca85a5.png"},356:function(n,t,a){"use strict";a.r(t);var s=a(37),i=Object(s.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"_002-nginx相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_002-nginx相关"}},[n._v("#")]),n._v(" 002-nginx相关")]),n._v(" "),s("h2",{attrs:{id:"nginx服务器的部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx服务器的部署"}},[n._v("#")]),n._v(" nginx服务器的部署")]),n._v(" "),s("p",[n._v("1.拉取最新镜像")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("docker pull nginx:latest\n")])])]),s("p",[n._v("2.在主机上创建用于映射的目录")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("mkdir -p /opt/nginx/config/conf.d\nmkdir -p /opt/nginx/logs\n")])])]),s("p",[n._v("3.运行安装命令")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("docker run \\\n    --name nginx \\\n    -p 8080:80 \\\n    -v  /opt/nginx/config/nginx.conf:/etc/nginx/nginx.conf \\\n    -v /opt/nginx/config/conf.d:/etc/nginx/conf.d  \\\n    -v /opt/nginx/logs:/var/log/nginx \\\n    -d 602e111c06b6 \n")])])]),s("h2",{attrs:{id:"正向代理-反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正向代理-反向代理"}},[n._v("#")]),n._v(" 正向代理&反向代理")]),n._v(" "),s("p",[n._v("1.正向代理：代理的是客户端，代客户端发出请求，特点是客户端非常明确要访问代服务器地址，服务器只清楚请求来自哪个代理服务器，而不知道具体的客户端。正向代理模式屏蔽或隐藏了真实客户端信息。\n正向代理的作用：\n（1）访问原来无法访问的资源，如google\n（2）可以做缓存，加速访问资源\n（3）对客户端访问授权，上网进行认证\n（4）代理可以记录用户访问记录，对外隐藏用户信息\n"),s("img",{attrs:{src:a(331),alt:"nginx-01"}})]),n._v(" "),s("p",[n._v("2.反向代理：代理服务器，代服务器接收请求，客户端无感知代理代存在，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。主要用于服务器集群分布式部署的情况下，方向代理隐藏了服务器的信息。\n反向代理的作用：\n（1）保证内网安全，通常将反向代理作为公网访问地址，web服务器是内网\n（2）负载均衡，通过反向代理服务器来优化网站的负载\n"),s("img",{attrs:{src:a(332),alt:"nginx-02"}})]),n._v(" "),s("p",[n._v("3.实际项目中，正向代理和方向代理可能会存在在一个应用场景下，正向代理代理客户端的请求去访问目标服务器，目标服务器是一个反向单利服务器，反向代理了多台真实的业务处理服务器")]),n._v(" "),s("p",[n._v("请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。将服务器接收到的请求按照规则分发的过程，称为负载均衡.负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种.硬件负载均衡成本较高，考虑成本原因，更多的会选择软件负载均衡。")]),n._v(" "),s("p",[n._v("软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。\n"),s("img",{attrs:{src:a(333),alt:"nginx-03"}})]),n._v(" "),s("blockquote",[s("p",[n._v("Nginx支持的负载均衡调度算法方式如下:")])]),n._v(" "),s("p",[n._v("weight轮询(默认，常用)：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。")]),n._v(" "),s("p",[n._v("ip_hash（常用）：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。")]),n._v(" "),s("p",[n._v("fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。")]),n._v(" "),s("p",[n._v("url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。")])])}),[],!1,null,null,null);t.default=i.exports}}]);