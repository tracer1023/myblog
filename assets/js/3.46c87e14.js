(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{334:function(a,t,s){a.exports=s.p+"assets/img/gitlab-02.0b9cb3dd.png"},335:function(a,t,s){a.exports=s.p+"assets/img/gitlab-01.e72aa83f.png"},336:function(a,t,s){a.exports=s.p+"assets/img/docker.c5aac84f.png"},337:function(a,t,s){a.exports=s.p+"assets/img/jenkins-05.665be910.png"},338:function(a,t,s){a.exports=s.p+"assets/img/jenkins-04.4b39b913.png"},339:function(a,t,s){a.exports=s.p+"assets/img/jenkins-03.3a577fb0.png"},340:function(a,t,s){a.exports=s.p+"assets/img/jenkins-02.7ff485a6.png"},341:function(a,t,s){a.exports=s.p+"assets/img/jenkins.3a7c3b33.png"},342:function(a,t,s){a.exports=s.p+"assets/img/jenkins-01.6baabbf6.png"},357:function(a,t,s){"use strict";s.r(t);var e=s(37),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"_001-docker相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_001-docker相关"}},[a._v("#")]),a._v(" 001-docker相关")]),a._v(" "),e("h2",{attrs:{id:"一-docker-常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-docker-常用命令"}},[a._v("#")]),a._v(" 一.docker 常用命令")]),a._v(" "),e("h4",{attrs:{id:"容器生命周期管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器生命周期管理"}},[a._v("#")]),a._v(" 容器生命周期管理")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run //创建一个新的容器并运行一个命令\n")])])]),e("h4",{attrs:{id:"容器操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器操作"}},[a._v("#")]),a._v(" 容器操作")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("进入容器\ndocker attach//突出容器会导致容器停止\ndocker exec //退出容器终端，不会导致容器停止\n\n导出容器\ndocker export 1e560fca3906 > ubuntu.tar\n导入容器快照\ncat docker/ubuntu.tar | docker import - test/ubuntu:v1\ndocker import http://example.com/exampleimage.tgz example/imagerepo\n")])])]),e("h4",{attrs:{id:"镜像操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像操作"}},[a._v("#")]),a._v(" 镜像操作")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker pull ubuntu:13.10 //拉取镜像\n")])])]),e("h2",{attrs:{id:"二-安装docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-安装docker"}},[a._v("#")]),a._v(" 二.安装docker")]),a._v(" "),e("h4",{attrs:{id:"先配置yum源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#先配置yum源"}},[a._v("#")]),a._v(" 先配置yum源")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("yum repolist\n")])])]),e("h4",{attrs:{id:"选用阿里源安装docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选用阿里源安装docker"}},[a._v("#")]),a._v(" 选用阿里源安装docker")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# step 1: 安装必要的一些系统工具\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n \n# Step 2: 添加软件源信息\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n \n# Step 3: 更新并安装Docker-CE\nsudo yum makecache fast\nsudo yum -y install docker-ce\n \n# Step 4: 开启Docker服务\nsudo service docker start\n")])])]),e("h4",{attrs:{id:"安装完成后输入docker-version查看docker是否安装成功"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装完成后输入docker-version查看docker是否安装成功"}},[a._v("#")]),a._v(" 安装完成后输入docker version查看docker是否安装成功")]),a._v(" "),e("h4",{attrs:{id:"docker加速器配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker加速器配置"}},[a._v("#")]),a._v(" Docker加速器配置")]),a._v(" "),e("p",[a._v("配置docker加速器，将会提升在国内获取docker官方镜像的速度，否则后面会很慢。在阿里云控制台中查看自己的镜像加速器地址，我的地是"),e("code",[a._v("https://scq88k25.mirror.aliyuncs.com")])]),a._v(" "),e("p",[a._v("使用配置文件"),e("code",[a._v("/etc/docker/daemon.json配置镜像加速器")]),a._v("。")]),a._v(" "),e("p",[a._v("系统没有时新建该文件，在daemon.json中添加加速地址")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n        d\n}\n")])])]),e("p",[a._v("重启docker daemon")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo systemctl daemon-reload//守护进程重启\nsudo systemctl restart docker//重启docker服务\n")])])]),e("h2",{attrs:{id:"三-docker安装gitlab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-docker安装gitlab"}},[a._v("#")]),a._v(" 三.docker安装gitlab")]),a._v(" "),e("h4",{attrs:{id:"下载镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下载镜像"}},[a._v("#")]),a._v(" 下载镜像")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 不加 tag 则默认为最新版本 latest\n$ docker pull gitlab/gitlab-ce\n")])])]),e("p",[e("code",[a._v("创建目录")]),a._v("：通常会将Gitlab的配置（config）/日志（log）/数据（data）放到容器之外，便于日后升级，因此先准备这三个目录")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mkdir -p /srv/gitlab/config\nmkdir -p /srv/gitlab/logs \nmkdir -p /srv/gitlab/data\n")])])]),e("p",[a._v("启动运行")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ docker run --detach \\\n  --hostname gitlab \\\n  --publish 8443:443 --publish 8880:80 --publish 8222:22 \\\n  --name gitlab \\\n  --restart always \\\n  --volume /srv/gitlab/config:/etc/gitlab \\\n  --volume /srv/gitlab/logs:/var/log/gitlab \\\n  --volume /srv/gitlab/data:/var/opt/gitlab \\\n  --privileged=true \\\n  gitlab/gitlab-ce:latest\n")])])]),e("p",[a._v("说明：")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("--hostname gitlab.zcj.com: 设置主机名或域名")])]),a._v(" "),e("li",[e("p",[a._v("--publish 8443:443：将http：443映射到外部端口8443")])]),a._v(" "),e("li",[e("p",[a._v("--publish 8880:80：将web：80映射到外部端口8880")])]),a._v(" "),e("li",[e("p",[a._v("--publish 8222:22：将ssh：22映射到外部端口8222")])]),a._v(" "),e("li",[e("p",[a._v("--name gitlab: 运行容器名")])]),a._v(" "),e("li",[e("p",[a._v("--restart always: 自动重启")])]),a._v(" "),e("li",[e("p",[a._v("--volume /srv/gitlab/config:/etc/gitlab: 挂载目录")])]),a._v(" "),e("li",[e("p",[a._v("--volume /srv/gitlab/logs:/var/log/gitlab: 挂载目录")])]),a._v(" "),e("li",[e("p",[a._v("--volume /srv/gitlab/data:/var/opt/gitlab: 挂载目录")])]),a._v(" "),e("li",[e("p",[a._v("--privileged=true 使得容器内的root拥有真正的root权限。否则，container内的root只是外部的一个普通用户权限")]),a._v(" "),e("p",[a._v("运行成功后，查看容器运行的状态")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker ps\n")])])])])]),a._v(" "),e("p",[a._v("访问：gitlab启动成功后，浏览器访问http://ip:8880, 即可访问。")]),a._v(" "),e("p",[a._v("在运行gitlab后，报了一个这样的错误")]),a._v(" "),e("p",[e("img",{attrs:{src:s(334),alt:"image-20200131145844848"}})]),a._v(" "),e("p",[a._v("解决办法如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("vi  /usr/lib/sysctl.d/00-system.conf\n")])])]),e("p",[a._v("添加如下代码：")]),a._v(" "),e("p",[e("img",{attrs:{src:s(335),alt:"image-20200131150004902"}})]),a._v(" "),e("p",[a._v("重启网络服务后，删除错误的容器，再次创建新容器。")]),a._v(" "),e("h4",{attrs:{id:"配置域名访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置域名访问"}},[a._v("#")]),a._v(" 配置域名访问")]),a._v(" "),e("p",[a._v("为了使用域名访问，需要配置nginx:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("vi /srv/gitlab/data/nginx/conf/nginx.conf \n")])])]),e("p",[a._v("配置如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("upstream gitlab{\n        server 127.0.0.1:8880;\n  }\n\n  server {\n        listen 80;\n        server_name gitlab.zcj.com;\n        access_log /var/log/nginx/gitlab.zcj.com-access.log;\n        error_log /var/log/nginx/gitlab.zcj.com-error.log;\n        location / {\n                proxy_pass_header Server;\n                proxy_set_header Host $http_host;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Scheme $scheme;\n                proxy_pass http://gitlab;\n        }\n  }\n")])])]),e("p",[a._v("重启nginx配置，但是还是无法生效，待跟踪")]),a._v(" "),e("h4",{attrs:{id:"配置邮件服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置邮件服务器"}},[a._v("#")]),a._v(" 配置邮件服务器")]),a._v(" "),e("p",[a._v("打开qq邮箱，开启IMAP/SMTP服务，根据文档获取授权码，然后跳转至挂载目录 "),e("code",[a._v("/srv/gitlab/config/")]),a._v(" 编辑"),e("code",[a._v("gitlab.rb")]),a._v(" 文件，找到 Email Settings的注释位置，然后修改以下内容：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("### Email Settings\ngitlab_rails['smtp_enabled'] = true //开启smtp功能\ngitlab_rails['smtp_address'] = 'smtp.qq.com'\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = '1451182750@qq.com' //你的邮箱账号\ngitlab_rails['smtp_password'] = 'bfuxzwnfkfzrjhfa'//授权码\ngitlab_rails['smtp_authentication'] = 'login'\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\ngitlab_rails['gitlab_email_from'] = '1451182750@qq.com'//发件人信息\ngitlab_rails['smtp_domain'] = 'qq.com'\n")])])]),e("p",[a._v("配置保持成功，输入以下命令使配置生效")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo docker exec gitlab gitlab-ctl reconfigure\n")])])]),e("p",[a._v("使配置生效之后我们可以使用 gitlab 自带的工具进行一下测试。依次执行下面的命令：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# 开启 gitlab 的 bash 工具\n$ docker exec -it gitlab bash\n\n# 开启 gitlab-rails 工具\n$ gitlab-rails console production\n\n# 发送邮件进行测试\nNotify.test_email('test_001@123.com', 'Message Subject', 'Message Body').deliver_now\n")])])]),e("p",[a._v("测试完成之后退出gitlab的bash工具，重启 gitlab 即可")]),a._v(" "),e("h3",{attrs:{id:"gitlab备份与恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlab备份与恢复"}},[a._v("#")]),a._v(" gitlab备份与恢复")]),a._v(" "),e("p",[a._v("根据上面的命令安装gitlab,做了文件卷的映射，把容器内的容器映射到容器外，在主机/srv文件夹下")]),a._v(" "),e("h4",{attrs:{id:"第一步备份gitlab文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一步备份gitlab文件"}},[a._v("#")]),a._v(" 第一步备份gitlab文件")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("tar -zcvf gitlab2020.tar.gz /srv\n将gitlab2020.tar.gz文件下载到本地\n")])])]),e("h4",{attrs:{id:"第二步备份gitlab容器，整体打包成镜像文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二步备份gitlab容器，整体打包成镜像文件"}},[a._v("#")]),a._v(" 第二步备份gitlab容器，整体打包成镜像文件")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1）docker ps//查看容器id\n2）docker commit -a 'zhangchongju' -m 'gitlab2020备份' containerId zhangchongju/gitlab:1.0\n-a 作者\n-m 提交的描述信息\ncontainerId 容器id\nzhangchongju/gitlab:1.0 镜像名称：版本号\n\n3）查看镜像，有刚才备份的镜像\ndocker images\n\n4)将镜像文件备份成.tar.gz文件，也可以直接将镜像文件push到阿里云\ndocker save imageId > ./gitlab20200415.tar.gz\n")])])]),e("p",[a._v("4.1)将镜像push到阿里云镜像仓库\n若没有创建过镜像仓库，要先创建一个镜像仓库，并设置仓库密码")]),a._v(" "),e("p",[e("img",{attrs:{src:s(336),alt:"img"}})]),a._v(" "),e("p",[a._v("4.1.1 将镜像发布到阿里云仓库")]),a._v(" "),e("div",{staticClass:"language-$xslt extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("将镜像推送到Registry\n$ sudo docker login --username=xxx registry.cn-beijing.aliyuncs.com\n$ sudo docker tag [ImageId] registry.cn-beijing.aliyuncs.com/wangmin/repository:[镜像版本号]\n$ sudo docker push registry.cn-beijing.aliyuncs.com/wangmin/repository:[镜像版本号]\n")])])]),e("h4",{attrs:{id:"gitlab恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlab恢复"}},[a._v("#")]),a._v(" gitlab恢复")]),a._v(" "),e("h5",{attrs:{id:"_1-srv目录恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-srv目录恢复"}},[a._v("#")]),a._v(" 1.srv目录恢复")]),a._v(" "),e("p",[a._v("将gitlab2020.tar.gz文件解压")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mv gitlab2020.tar.gz /\ntar -zxf gitlab2020.tar.gz\n")])])]),e("p",[a._v("在根目录下查看，有/srv目录\n由于docker容器内部访问宿主机的文件，并不是root用户创建的，没有root权限，需要给文件添加权限")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("chmod -R 777 srv 给srv文件夹下面的所有文件添加读写可执行权限\n")])])]),e("h5",{attrs:{id:"_2-启动gitlab备份的镜像文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动gitlab备份的镜像文件"}},[a._v("#")]),a._v(" 2.启动gitlab备份的镜像文件")]),a._v(" "),e("p",[a._v("若是.tar.gz文件，先将该文件加载成镜像文件\ndocker load < ./gitlab2020-image.tar.gz")]),a._v(" "),e("p",[a._v("重新执行容器启动命令")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ docker run --detach \\\n  --hostname gitlab \\\n  --publish 8443:443 --publish 8880:80 --publish 8222:22 \\\n  --name gitlab \\\n  --restart always \\\n  --volume /srv/gitlab/config:/etc/gitlab \\\n  --volume /srv/gitlab/logs:/var/log/gitlab \\\n  --volume /srv/gitlab/data:/var/opt/gitlab \\\n  --privileged=true \\\n  ca7e810526e4\n")])])]),e("h2",{attrs:{id:"四-docker安装jenkins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-docker安装jenkins"}},[a._v("#")]),a._v(" 四.docker安装jenkins")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("拉取docker镜像\ndocker pull jenkins/jenkins:lts\ndocker images\ndocker inspect imageId //查看是否最新版本\nmkdir /home/jenkins_home\ndocker run -d --name jenkins -p 8081:8080 -v /srv/jenkins:/srv/jenkins jenkins/jenkins:lts\n//d:后台运行(守护进程)\n//-p: 8081:8080 是制定对外暴露的端口，容器内部用8080对应外部的8081\n//-v /srv/jenkins:/src/jenkins是将jenkins挂载到jenkins下面，方便看，并且空间也大\n//安装成功后，访问ip+端口(8081)\n")])])]),e("p",[a._v("访问后，需要管理员的密钥，需要进入到容器中去查找")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("查看当前正在运行的容器(docker ps)\ndocker -exec -it b83ba79f922c /bin/bash\ncat /var/jenkins/secrets/initialAdminPassword\n")])])]),e("p",[a._v("输入密码后，有推荐安装和自定义安装插件，新手使用推荐安装的方式")]),a._v(" "),e("p",[a._v("插件安装完成后，会自动进入用户注册界面")]),a._v(" "),e("p",[a._v("点击用户设置---配置管理员密码")]),a._v(" "),e("h4",{attrs:{id:"jenkins-系统配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-系统配置"}},[a._v("#")]),a._v(" jenkins-系统配置")]),a._v(" "),e("p",[a._v("安装好gitlab相关的插件")]),a._v(" "),e("p",[a._v("在gitlab上生成access Token，进入jenkins->凭据，添加相应的token")]),a._v(" "),e("p",[e("img",{attrs:{src:s(337),alt:"image-20200327121749944"}})]),a._v(" "),e("p",[a._v("进入jenkins->系统管理->系统配置->gitlab配置项")]),a._v(" "),e("p",[e("img",{attrs:{src:s(338),alt:"image-20200327120757984"}})]),a._v(" "),e("p",[a._v("//连接服务器，进入jenkins容器，生成公钥ssh-keygen -t rsa")]),a._v(" "),e("p",[a._v("在gitlab上配置jenkins的项目工程相关信息")]),a._v(" "),e("p",[e("img",{attrs:{src:s(339),alt:"image-20200327205158393"}})]),a._v(" "),e("p",[a._v("url和secret Token都在jenkins上生成")]),a._v(" "),e("p",[e("img",{attrs:{src:s(340),alt:"image-20200327205412871"}})]),a._v(" "),e("h4",{attrs:{id:"jenkins的基本功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jenkins的基本功能"}},[a._v("#")]),a._v(" jenkins的基本功能")]),a._v(" "),e("p",[e("img",{attrs:{src:s(341),alt:"img"}})]),a._v(" "),e("p",[e("img",{attrs:{src:s(342),alt:"image-20200325210420378"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);